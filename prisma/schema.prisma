generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

model Store {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  name      String
  userId    String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  billboards Billboard[] @relation("StoreToBillboard")
  categories Category[]  @relation("StoreToCategory")
  sizes      Size[]      @relation("StoreToSize")
  colors     Color[]     @relation("StoreToColor")
  products   Product[]   @relation("StoreToProduct")
  orders     Order[]     @relation("StoreToOrder")
}

model Billboard {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  label     String
  imageUrl  String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  store      Store?     @relation("StoreToBillboard", fields: [storeId], references: [id])
  storeId    String?    @db.ObjectId
  categories Category[] @relation("BillboardToCategory")

  @@index([storeId])
}

model Category {
  id String @id @default(auto()) @map("_id") @db.ObjectId

  storeId String @db.ObjectId
  store   Store  @relation("StoreToCategory", fields: [storeId], references: [id])

  billboardId String    @db.ObjectId
  billboard   Billboard @relation("BillboardToCategory", fields: [billboardId], references: [id])

  name      String
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  products  Product[] @relation("CategoryToProduct")

  @@index([storeId])
  @@index([billboardId])
}

model Size {
  id String @id @default(auto()) @map("_id") @db.ObjectId

  storeId String @db.ObjectId
  store   Store  @relation("StoreToSize", fields: [storeId], references: [id])

  name      String
  value     String
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  products  Product[] @relation("SizeToProduct")

  @@index([storeId])
}

model Color {
  id String @id @default(auto()) @map("_id") @db.ObjectId

  storeId String @db.ObjectId
  store   Store  @relation("StoreToColor", fields: [storeId], references: [id])

  name      String
  value     String
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  products  Product[] @relation("ColorToProduct")

  @@index([storeId])
}

model Product {
  id String @id @default(auto()) @map("_id") @db.ObjectId

  storeId String @db.ObjectId
  store   Store  @relation("StoreToProduct", fields: [storeId], references: [id])

  categoryId String   @db.ObjectId
  category   Category @relation("CategoryToProduct", fields: [categoryId], references: [id])

  sizeId String @db.ObjectId
  size   Size   @relation("SizeToProduct", fields: [sizeId], references: [id])

  colorId String @db.ObjectId
  color   Color  @relation("ColorToProduct", fields: [colorId], references: [id])

  images Image[] @relation("ProductToImage")

  name       String
  price      String
  isFeatured Boolean  @default(false)
  isArchived Boolean  @default(false)
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  orderItems OrderItem[] @relation("ProductToOrderItem")

  @@index([storeId])
  @@index([categoryId])
  @@index([sizeId])
  @@index([colorId])
}

model Image {
  id String @id @default(auto()) @map("_id") @db.ObjectId

  productId String  @db.ObjectId
  product   Product @relation("ProductToImage", fields: [productId], references: [id], onDelete: Cascade)

  url       String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([productId])
}

model Order {
  id String @id @default(auto()) @map("_id") @db.ObjectId

  storeId String @db.ObjectId
  store   Store  @relation("StoreToOrder", fields: [storeId], references: [id])

  orderItems OrderItem[] @relation("OrderToOrderItem")

  isPaid  Boolean @default(false)
  phone   String  @default("")
  address String  @default("")

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model OrderItem {
  id String @id @default(auto()) @map("_id") @db.ObjectId

  orderId String @db.ObjectId
  order   Order  @relation("OrderToOrderItem", fields: [orderId], references: [id])

  productId String  @db.ObjectId
  product   Product @relation("ProductToOrderItem", fields: [productId], references: [id])

  @@index([orderId])
  @@index([productId])
}
